{"version":3,"file":"molecules-flow-FlowNodeComponent-stories.0e2ae204.iframe.bundle.js","mappings":";;;;;;AAsBA;;;AAGA;AACA;;;;AAIA;AACA;;;;AAIA;;AAEA;;;;AAIA;;;;;AAKA;;AAIA;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;;AClDA;AACA;AAQA;;ACTA;AAQA;;;;;;;;;;ACPA;;AAEA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AAGA;;;AAGA;;;;;;;;;;;;;;;;;;;ACfA;;;;;;;AASA;;;;;;;AAOA;AACA;AACA;;;AAGA;;;;AAIA;AACA;AACA;;;AAKA;;;;AAIA;;AAIA;;;AAGA;;;AAKA;;;;AAIA;AACA;;AAEA;;;;;;;;;AAWA;;;;ACxEA;;;AAGA;;ACPA;AACA;AACA;AACA;;;ACFA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AAGA;ACbA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;ACCA;;AAKA;;AAGA;AACA;AACA;AAGA;;;;;AAiBA;AACA;;;AAGA;AAGA;AACA;;;;;;;;AC/CA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;;;AAGA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;;;;AAIA;;;AAGA;;;;AAIA;;;AAGA;AACA;;;;AAIA;;;AAGA;;;;AAIA;;;AAGA;AACA;;;;AAIA;;;AAGA;;;;;ACrHA;AACA;;;;;AAKA;;;;;;AAMA;;;;AAIA;;;;AAIA;AAGA;;;AAOA;;;AAUA;;;;ACzCA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;;;;;AAKA;AACA;AACA;AACA;AAGA;;;;AAIA;AACA;AACA;;;;;;;;;;;AC7BA;AACA;AAGA;;AAEA;;;AAGA;AACA;;;;AAIA;;;;AAIA;;AAIA;;;;;;;;;;;;AAYA;AACA;;;AAUA;ACxCA;AACA;;;AAGA;AACA;;AAEA;AACA;;;AAGA;AACA;;;AAGA;AACA;AACA;AACA;;ACrBA;;;;;;;AASA;;;;;;AAMA;AACA;;AAEA;;;;AAIA;;;AAGA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;AAGA;;;;;AAKA;;;;AAIA;;AAIA;;;;AAIA;;AAEA;;;;;;;AAOA;;;;;AChBA;;AAQA;;;;AAIA;AAGA;AACA;AAOA;;;;;;;;AAQA;AACA;AACA;AACA;;;;;;;AAOA;AACA","sources":["webpack://@mimirorg/component-library/./src/components/molecules/flow/nodes/FlowNodeComponent.styled.ts","webpack://@mimirorg/component-library/./src/components/layouts/Box.styled.tsx","webpack://@mimirorg/component-library/./src/components/layouts/Flexbox.styled.tsx","webpack://@mimirorg/component-library/./src/components/layouts/Gridbox.styled.tsx","webpack://@mimirorg/component-library/./src/components/molecules/dialog/Dialog.styled.ts","webpack://@mimirorg/component-library/./src/components/molecules/file/components/FileItemComponent.styled.ts","webpack://@mimirorg/component-library/./src/components/molecules/form/Form.ts","webpack://@mimirorg/component-library/./src/components/molecules/form/FormField.styled.ts","webpack://@mimirorg/component-library/./src/components/molecules/form/FormFieldset.ts","webpack://@mimirorg/component-library/./src/components/molecules/form/FormLegend.ts","webpack://@mimirorg/component-library/./src/components/molecules/inputs/calendar/CalendarComponent.styled.tsx","webpack://@mimirorg/component-library/./src/components/molecules/inputs/calendar/components/CalendarContent.styled.tsx","webpack://@mimirorg/component-library/./src/components/molecules/inputs/checkbox/Checkbox.styled.tsx","webpack://@mimirorg/component-library/./src/components/molecules/inputs/input/Input.styled.ts","webpack://@mimirorg/component-library/./src/components/molecules/inputs/radio/RadioButton.styled.tsx","webpack://@mimirorg/component-library/./src/components/molecules/inputs/textarea/Textarea.ts","webpack://@mimirorg/component-library/./src/components/molecules/inputs/userAutoComplete/UserAutoComplete.styled.ts","webpack://@mimirorg/component-library/./src/components/molecules/popover/Popover.styled.ts","webpack://@mimirorg/component-library/./src/components/molecules/switch/SwitchComponent.styled.tsx","webpack://@mimirorg/component-library/./src/components/organism/inspector-panel/InspectorPanel.styled..tsx"],"sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport type FlowNodeBoxProps = {\r\n  colorMain?: string;\r\n  colorSelected?: string;\r\n  selected?: boolean;\r\n  hidden?: boolean;\r\n  visible?: boolean;\r\n  nodeWidth?: number;\r\n  nodeHeight?: number;\r\n  connectorWidth?: number;\r\n  connectorHeight?: number;\r\n};\r\n\r\nexport const FlowNodeContainer = styled.div<FlowNodeBoxProps>`\r\n  display: flex;\r\n  width: fit-content;\r\n  height: fit-content;\r\n  margin: auto;\r\n  flex-direction: row;\r\n`;\r\n\r\nexport const FlowNodeBox = styled.div<FlowNodeBoxProps>`\r\n  display: flex;\r\n  border-radius: 10px;\r\n  min-height: ${(props) => props.nodeHeight}px;\r\n  width: ${(props) => props.nodeWidth}px;\r\n  font-size: 11px;\r\n  text-align: center;\r\n  box-shadow: 0 5px 5px -2px rgba(0, 0, 0, 0.2);\r\n  background-color: ${(props) => props.colorMain};\r\n  opacity: ${(props) => (props.hidden ? 0 : 1)};\r\n  transition: border 250ms, opacity 250ms;\r\n  padding: 0;\r\n  border: 3px solid;\r\n  border-color: ${(props) => props.colorMain} !important;\r\n  margin: 0;\r\n  opacity: ${(props) => (props.visible ? 1 : 0)};\r\n\r\n  &:hover {\r\n    border: 3px solid;\r\n    border-color: ${(props) => props.colorSelected} !important;\r\n  }\r\n\r\n  &.selected {\r\n    border: 3px solid;\r\n    border-color: ${(props) => props.colorSelected} !important;\r\n  }\r\n`;\r\n\r\nexport const FlowNodeContentBox = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  flex: 1 1 auto;\r\n  gap: 5px;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  margin-top: 10px;\r\n`;\r\n","import { ElementType } from \"react\";\nimport styled from \"styled-components\";\nimport {\n  Borders,\n  Display,\n  Flex,\n  Grid,\n  Palette,\n  Polymorphic,\n  Positions,\n  Shadows,\n  Sizing,\n  Spacings,\n} from \"../core/props\";\nimport {\n  bordersMixin,\n  displayMixin,\n  flexMixin,\n  focus,\n  gridMixin,\n  paletteMixin,\n  positionsMixin,\n  shadowsMixin,\n  sizingMixin,\n  spacingMixin,\n} from \"../core/theme/helpers\";\nimport { motion } from \"framer-motion\";\n\nexport type BoxProps = Display &\n  Positions &\n  Flex &\n  Grid &\n  Palette &\n  Sizing &\n  Spacings &\n  Borders &\n  Shadows &\n  Polymorphic<ElementType>;\n\n/**\n * A polymorphic layout component for a box element.\n *\n * Since many components often need a generic box for layout purposes this component exposes flexbox and grid properties\n * in addition to properties related to display, positions, palette, sizing, spacing, borders, shadows etc.\n *\n * @param as polymorphic parameter for changing base element (defaults to <div>)\n * @param props can receive all the css properties related to the aforementioned interfaces: palette, sizing etc...\n * @constructor\n */\nexport const Box = styled.div<BoxProps>`\n  ${focus};\n  ${displayMixin};\n  ${flexMixin};\n  ${gridMixin};\n  ${positionsMixin};\n  ${sizingMixin};\n  ${bordersMixin};\n  ${paletteMixin};\n  ${shadowsMixin};\n  ${spacingMixin};\n`;\n\n/**\n * An animation wrapper for the Box component\n *\n * @see https://github.com/framer/motion\n */\nexport const MotionBox = motion(Box);\n","import { ElementType } from \"react\";\nimport styled from \"styled-components\";\nimport { Flex, Polymorphic } from \"./../core/props/\";\nimport { flexMixin, focus } from \"../core/theme/helpers\";\nimport { motion } from \"framer-motion\";\n\nexport type FlexBoxProps = Flex & Polymorphic<ElementType>;\n\n/**\n * A polymorphic layout component for flexbox behaviour.\n *\n * @param as polymorphic parameter for changing base element (defaults to <div>)\n * @param props can receive all standard css flexbox properties\n * @constructor\n */\nexport const Flexbox = styled.div<FlexBoxProps>`\n  display: flex;\n  ${focus};\n  ${flexMixin};\n`;\n\n/**\n * An animation wrapper for the Flexbox component\n *\n * @see https://github.com/framer/motion\n */\nexport const MotionFlexbox = motion(Flexbox);\n","import { ElementType } from \"react\";\nimport styled from \"styled-components\";\nimport { Grid, Polymorphic } from \"../core/props\";\nimport { gridMixin } from \"../core/theme/helpers\";\nimport { motion } from \"framer-motion\";\n\nexport type GridboxProps = Grid & Polymorphic<ElementType>;\n\n/**\n * A polymorphic layout component for grid behaviour.\n *\n * @param as polymorphic parameter for changing base element (defaults to <div>)\n * @param props can receive all standard css grid properties\n * @constructor\n */\nexport const Gridbox = styled.div<GridboxProps>`\n  display: grid;\n  ${gridMixin};\n`;\n\n/**\n * An animation wrapper for the Grid component\n *\n * @see https://github.com/framer/motion\n */\nexport const MotionGridbox = motion(Gridbox);\n","import { motion } from \"framer-motion\";\nimport styled from \"styled-components\";\nimport { Flex, Sizing } from \"../../core/props\";\nimport { flexMixin, sizingMixin, translucify } from \"../../core/theme/helpers\";\nimport { Box } from \"../../layouts\";\n\nexport type DialogContentProps = Sizing & Flex;\n\nexport const DialogContent = styled(Box)<DialogContentProps>`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: ${(props) => props.theme.mimir.spacing.xxxl};\n\n  background-color: ${(props) => props.theme.mimir.color.surface.base};\n  border-radius: ${(props) => props.theme.mimir.border.radius.large};\n\n  min-height: 380px;\n  padding: ${(props) => props.theme.mimir.spacing.multiple(6)};\n\n  box-shadow: ${(props) => props.theme.mimir.shadow.small};\n\n  ${sizingMixin};\n  ${flexMixin};\n`;\n\nexport const DialogOverlay = styled(motion.div)`\n  position: fixed;\n  inset: 0;\n  background-color: ${(props) => translucify(props.theme.mimir.color.primary.base, 0.08)};\n`;\n","import styled from \"styled-components\";\n\nexport const FileItemContainer = styled.div`\n  display: flex;\n  align-content: left;\n  align-items: center;\n  flex-direction: row;\n\n  textarea {\n    min-height: 80px;\n  }\n\n  & .fileitem-delete {\n    :hover {\n      cursor: pointer;\n      border: 2px solid black;\n      border-radius: 50%;\n    }\n  }\n\n  @media screen and ${(props) => props.theme.mimir.queries.phoneAndBelow} {\n    flex-direction: column;\n\n    textarea {\n      width: 100%;\n    }\n  }\n`;\n\nexport const FileInfoContainer = styled.div`\n  display: flex;\n  width: 30%;\n  align-content: center;\n  align-items: center;\n  justify-content: start;\n  flex-direction: row;\n  margin-right: ${(props) => props.theme.mimir.spacing.xl};\n  padding-left: ${(props) => props.theme.mimir.spacing.s};\n  padding-right: ${(props) => props.theme.mimir.spacing.s};\n\n  :hover {\n    outline: 1px solid ${(props) => props.theme.mimir.color.primary.base};\n    cursor: pointer;\n  }\n\n  @media screen and ${(props) => props.theme.mimir.queries.phoneAndBelow} {\n    margin-top: ${(props) => props.theme.mimir.spacing.xl};\n    margin-bottom: ${(props) => props.theme.mimir.spacing.xl};\n    width: 100%;\n  }\n`;\n\nexport const FileIconContainer = styled.div`\n  display: flex;\n  min-width: 50px;\n\n  @media screen and ${(props) => props.theme.mimir.queries.phoneAndBelow} {\n  }\n`;\n\nexport const FileTextareaContainer = styled.div`\n  width: 70%;\n\n  @media screen and ${(props) => props.theme.mimir.queries.phoneAndBelow} {\n    width: 100%;\n  }\n`;\n\nexport const FileTextContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  max-width: 150px;\n  margin-left: ${(props) => props.theme.mimir.spacing.l};\n  margin-right: ${(props) => props.theme.mimir.spacing.l};\n\n  @media screen and ${(props) => props.theme.mimir.queries.phoneAndBelow} {\n    max-width: none;\n    width: 70%;\n\n    h4,\n    p {\n      margin: 0px;\n    }\n  }\n`;\n\nFileItemContainer.defaultProps = {};\n","import { FormHTMLAttributes } from \"react\";\nimport styled from \"styled-components\";\nimport { Flex } from \"../../core/props\";\nimport { flexMixin } from \"../../core/theme/helpers\";\n\ntype FormProps = FormHTMLAttributes<HTMLFormElement> & Flex;\n\n/**\n * A simple wrapper around form to control general form layout\n */\nexport const Form = styled.form<FormProps>`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  gap: ${(props) => props.theme.mimir.spacing.xxxl};\n  width: 100%;\n\n  ${flexMixin};\n`;\n","import styled from \"styled-components\";\nimport { TextTypes } from \"../../core/props\";\nimport { getTextRole } from \"../../core/theme/helpers\";\n\ninterface FormFieldLabelTextProps {\n  indent?: boolean;\n  variant: TextTypes;\n}\n\nexport const FormFieldLabelText = styled.span<FormFieldLabelTextProps>`\n  ${({ variant }) => getTextRole(variant)}\n  color: ${(props) => props.theme.mimir.color.text.base};\n  padding-left: ${(props) => props.indent && props.theme.mimir.spacing.l};\n  border-left: ${(props) => props.indent && \"1px solid transparent\"};\n`;\n","import styled from \"styled-components\";\nimport { Flex } from \"../../core/props\";\nimport { flexMixin } from \"../../core/theme/helpers\";\n\nexport type FormFieldsetProps = Flex;\n\n/**\n * A simple wrapper around fieldset to control padding/margins/spacing around form inputs\n */\nexport const FormFieldset = styled.fieldset<FormFieldsetProps>`\n  display: flex;\n  gap: ${(props) => props.theme.mimir.spacing.xxl};\n\n  padding: ${(props) => props.theme.mimir.spacing.xl} ${(props) => props.theme.mimir.spacing.xl}\n    ${(props) => props.theme.mimir.spacing.multiple(6)};\n\n  border: 0;\n  border-radius: ${(props) => props.theme.mimir.border.radius.medium};\n  box-shadow: ${(props) => props.theme.mimir.shadow.medium};\n  background-color: ${(props) => props.theme.mimir.color.text.on};\n\n  ${flexMixin};\n`;\n\nFormFieldset.defaultProps = {\n  flexDirection: \"column\",\n};\n","import styled from \"styled-components\";\n\nexport type FormLegendProps = {\n  backgroundColor?: string;\n  color?: string;\n};\n\n/**\n * A simple wrapper around legend\n */\nexport const FormLegend = styled.legend<FormLegendProps>`\n  color: ${(props) => (props.color != null ? props.color : props.theme.mimir.color.text.on)};\n  background-color: ${(props) =>\n    props.backgroundColor != null ? props.backgroundColor : props.theme.mimir.color.primary.base};\n  padding: ${(props) => props.theme.mimir.spacing.s} ${(props) => props.theme.mimir.spacing.l};\n  padding-top: ${(props) => props.theme.mimir.spacing.s};\n  margin-bottom: ${(props) => props.theme.mimir.spacing.xl};\n  border-radius: ${(props) => props.theme.mimir.border.radius.small};\n  box-shadow: ${(props) => props.theme.mimir.shadow.medium};\n`;\n","import { HTMLAttributes } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { Flex, Sizing, Spacings } from \"../../../core/props\";\nimport { flexMixin, sizingMixin, spacingMixin } from \"../../../core/theme/helpers\";\nimport { InputContainer } from \"../input/Input.styled\";\nimport { compactCalendar } from \"./variants/compactCalendar\";\n\nexport type CalendarVariant = \"standard\" | \"compact\";\n\nexport type CalendarComponentContainerProps = Flex &\n  Sizing &\n  Spacings &\n  Omit<HTMLAttributes<HTMLDivElement>, \"onChange\"> & {\n    variant?: CalendarVariant;\n  };\n\nexport const CalendarComponentContainer = styled.div<CalendarComponentContainerProps>`\n  display: flex;\n\n  ${({ variant }) => {\n    switch (variant) {\n      case \"compact\": {\n        return compactCalendar();\n      }\n    }\n  }};\n\n  ${flexMixin};\n  ${sizingMixin};\n  ${spacingMixin};\n`;\n\nCalendarComponentContainer.defaultProps = {\n  variant: \"standard\",\n};\n\ninterface CalendarComponentInputProps {\n  isDisabled?: boolean;\n}\n\n/**\n * The input for the calendar is always disabled, since the user interacts with the calendar through a button and modal.\n * To explicitly style the input when the \"whole\" calendar is disabled we use a custom isDisabled property for the input.\n */\nexport const CalendarComponentInput = styled(InputContainer)<CalendarComponentInputProps>`\n  height: 100%;\n  width: 100%;\n\n  :disabled {\n    color: ${(props) => props.theme.mimir.color.surface.variant.on};\n    background-color: ${(props) => props.theme.mimir.color.surface.variant.base};\n  }\n\n  ${({ theme, isDisabled }) =>\n    isDisabled &&\n    css`\n      color: ${theme.mimir.color.surface.variant.on} !important;\n      background-color: ${theme.mimir.color.outline.base} !important;\n    `};\n`;\n","import { HTMLAttributes } from \"react\";\nimport styled from \"styled-components\";\nimport { getTextRole } from \"../../../../core/theme/helpers\";\n\nexport const CalendarContentContainer = styled.div<HTMLAttributes<HTMLDivElement>>`\n  .react-calendar {\n    width: 350px;\n    max-width: 100%;\n    background-color: inherit;\n    border: none;\n    ${getTextRole(\"body-large\")};\n    border-radius: ${(props) => props.theme.mimir.border.radius.medium};\n  }\n  .react-calendar--doubleView {\n    width: 700px;\n  }\n  .react-calendar--doubleView .react-calendar__viewContainer {\n    display: flex;\n    margin: -0.5em;\n  }\n  .react-calendar--doubleView .react-calendar__viewContainer > * {\n    width: 50%;\n    margin: 0.5em;\n  }\n  .react-calendar,\n  .react-calendar *,\n  .react-calendar *:before,\n  .react-calendar *:after {\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n  }\n  .react-calendar button {\n    margin: 0;\n    border: 0;\n    outline: none;\n  }\n  .react-calendar button:enabled:hover {\n    cursor: pointer;\n  }\n  .react-calendar__navigation {\n    display: flex;\n    height: 44px;\n    margin-bottom: 1em;\n  }\n  .react-calendar__navigation button {\n    min-width: 44px;\n    background: none;\n    border-radius: ${(props) => props.theme.mimir.border.radius.medium};\n  }\n  .react-calendar__navigation button:disabled {\n    background-color: ${(props) => props.theme.mimir.color.outline.base};\n  }\n  .react-calendar__navigation button:enabled:hover,\n  .react-calendar__navigation button:enabled:focus {\n    background-color: ${(props) => props.theme.mimir.color.secondary.container?.base};\n  }\n  .react-calendar__month-view__weekdays {\n    text-align: center;\n    text-transform: uppercase;\n    font-weight: bold;\n    font-size: 0.75em;\n  }\n  .react-calendar__month-view__weekdays__weekday {\n    padding: 0.5em;\n    abbr {\n      text-decoration: none;\n    }\n  }\n  .react-calendar__month-view__weekNumbers .react-calendar__tile {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 0.75em;\n    font-weight: bold;\n  }\n  .react-calendar__month-view__days__day--weekend {\n    color: #d10000;\n  }\n  .react-calendar__month-view__days__day--neighboringMonth {\n    color: #757575;\n  }\n  .react-calendar__year-view .react-calendar__tile,\n  .react-calendar__decade-view .react-calendar__tile,\n  .react-calendar__century-view .react-calendar__tile {\n    padding: 2em 0.5em;\n  }\n  .react-calendar__tile {\n    max-width: 100%;\n    padding: ${(props) => props.theme.mimir.spacing.l};\n    background: none;\n    text-align: center;\n    line-height: 16px;\n    border-radius: ${(props) => props.theme.mimir.border.radius.medium};\n  }\n  .react-calendar__tile:disabled {\n    background-color: ${(props) => props.theme.mimir.color.outline.base};\n  }\n  .react-calendar__tile:enabled:hover,\n  .react-calendar__tile:enabled:focus {\n    background-color: ${(props) => props.theme.mimir.color.secondary.container?.base};\n  }\n  .react-calendar__tile--now {\n    background-color: ${(props) => props.theme.mimir.color.secondary.container?.base};\n    color: ${(props) => props.theme.mimir.color.text.base};\n  }\n  .react-calendar__tile--now:enabled:hover,\n  .react-calendar__tile--now:enabled:focus {\n    background-color: ${(props) => props.theme.mimir.color.secondary.container?.base};\n  }\n  .react-calendar__tile--hasActive {\n    background: ${(props) => props.theme.mimir.color.tertiary.container?.base};\n  }\n  .react-calendar__tile--hasActive:enabled:hover,\n  .react-calendar__tile--hasActive:enabled:focus {\n    background-color: ${(props) => props.theme.mimir.color.secondary.container?.base};\n  }\n  .react-calendar__tile--active {\n    background-color: ${(props) => props.theme.mimir.color.tertiary.container?.base};\n    color: ${(props) => props.theme.mimir.color.text.base};\n  }\n  .react-calendar__tile--active:enabled:hover,\n  .react-calendar__tile--active:enabled:focus {\n    background-color: ${(props) => props.theme.mimir.color.secondary.container?.base};\n  }\n  .react-calendar--selectRange .react-calendar__tile--hover {\n    background-color: ${(props) => props.theme.mimir.color.surface.variant.base};\n  }\n`;\n","import * as CheckboxPrimitive from \"@radix-ui/react-checkbox\";\nimport { CheckBox, CheckBoxOutlineBlank } from \"@styled-icons/material-rounded\";\nimport { motion } from \"framer-motion\";\nimport styled from \"styled-components\";\nimport { focus } from \"../../../core/theme/helpers\";\n\nexport const CheckboxRoot = styled(CheckboxPrimitive.Root)`\n  all: unset;\n  position: relative;\n  border-radius: ${(props) => props.theme.mimir.border.radius.small};\n  color: ${(props) => props.theme.mimir.color.primary.base};\n  height: 24px;\n  width: 24px;\n\n  :disabled {\n    color: ${(props) => props.theme.mimir.color.outline.base};\n    cursor: not-allowed;\n  }\n\n  :not(:disabled) {\n    :hover {\n      background-color: ${(props) => props.theme.mimir.color.secondary.container?.base};\n    }\n\n    :active {\n      color: ${(props) => props.theme.mimir.color.surface.on};\n    }\n  }\n\n  ${focus};\n`;\n\nexport const CheckboxIndicator = styled(CheckboxPrimitive.Indicator)``;\n\nexport const CheckboxEmpty = styled(CheckBoxOutlineBlank)`\n  position: absolute;\n  inset: 0;\n`;\n\nexport const CheckboxChecked = styled(CheckBox)`\n  position: absolute;\n  inset: 0;\n`;\n\n/**\n * An animation wrapper for the CheckboxRoot component\n *\n * @see https://github.com/framer/motion\n */\nexport const MotionCheckboxRoot = motion(CheckboxRoot);\n","import styled from \"styled-components\";\nimport { focus, getTextRole, placeholder, sizingMixin } from \"../../../core/theme/helpers\";\nimport { InputProps } from \"./Input\";\n\nexport const InputContainer = styled.input<InputProps>`\n  height: 100%;\n  width: 100%;\n\n  border: 1px solid ${(props) => props.theme.mimir.color.outline.base};\n  border-radius: ${(props) => props.theme.mimir.border.radius.medium};\n  padding: ${(props) => props.theme.mimir.spacing.base} ${(props) => props.theme.mimir.spacing.l};\n  padding-right: ${(props) => props.icon && props.iconPlacement === \"right\" && props.theme.mimir.spacing.multiple(6)};\n  padding-left: ${(props) => props.icon && props.iconPlacement === \"left\" && props.theme.mimir.spacing.multiple(6)};\n\n  background-color: ${(props) => props.theme.mimir.color.pure.base};\n  color: ${(props) => props.theme.mimir.color.background.on};\n\n  :disabled {\n    color: ${(props) => props.theme.mimir.color.surface.variant.on};\n    background-color: ${(props) => props.theme.mimir.color.outline.base};\n  }\n\n  box-sizing: border-box;\n\n  ${getTextRole(\"body-large\")};\n  ${sizingMixin};\n  ${placeholder};\n  ${focus};\n`;\n\nexport const InputIconContainer = styled.span<InputProps>`\n  position: absolute;\n  top: 50%;\n  transform: translate(0, -50%);\n  left: ${(props) => props.icon && props.iconPlacement === \"left\" && props.theme.mimir.spacing.xl};\n  right: ${(props) => props.icon && props.iconPlacement === \"right\" && props.theme.mimir.spacing.xl};\n  color: ${(props) => props.theme.mimir.color.primary.base};\n  line-height: 0;\n\n  img,\n  svg {\n    width: 24px;\n    height: 24px;\n  }\n`;\n","import * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\";\nimport { motion } from \"framer-motion\";\nimport styled from \"styled-components\";\n\nexport const RadioButtonRoot = styled(RadioGroupPrimitive.Root)`\n  all: unset;\n  display: flex;\n  flex-direction: ${(props) => props.orientation && props.orientation};\n  gap: ${(props) => props.theme.mimir.spacing.l};\n`;\n\nexport const RadioGroupItem = styled(RadioGroupPrimitive.Item)`\n  all: unset;\n  background-color: ${(props) => props.theme.mimir.color.surface.variant.base};\n  width: 20px;\n  height: 20px;\n  border-radius: ${(props) => props.theme.mimir.border.radius.round};\n  box-shadow: ${(props) => props.theme.mimir.shadow.small};\n\n  :hover {\n    cursor: pointer;\n    background-color: ${(props) => props.theme.mimir.color.secondary.container?.base};\n  }\n\n  :focus {\n    box-shadow: ${(props) => props.theme.mimir.shadow.small};\n  }\n`;\n\nexport const RadioGroupIndicator = styled(RadioGroupPrimitive.Indicator)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  position: relative;\n  &::after {\n    content: \"\";\n    display: block;\n    width: 50%;\n    height: 50%;\n    border-radius: ${(props) => props.theme.mimir.border.radius.round};\n    background-color: ${(props) => props.theme.mimir.color.primary.base};\n    margin: 25% auto;\n  }\n`;\n\n/**\n * An animation wrapper for the RadioButtonGroup component\n *\n * @see https://github.com/framer/motion\n */\nexport const MotionRadioButtonRoot = motion(RadioButtonRoot);\n","import { TextareaHTMLAttributes } from \"react\";\nimport styled from \"styled-components\";\nimport { Sizing } from \"../../../core/props\";\nimport { focus, getTextRole, placeholder, sizingMixin } from \"../../../core/theme/helpers\";\n\n/**\n * A simple wrapper over the textarea-tag, with styling that follows library conventions.\n */\n\ntype TextareaProps = TextareaHTMLAttributes<HTMLTextAreaElement> & Sizing;\n\nexport const Textarea = styled.textarea<TextareaProps>`\n  border: 1px solid ${(props) => props.theme.mimir.color.outline.base};\n  border-radius: ${(props) => props.theme.mimir.border.radius.medium};\n  min-height: 150px;\n  width: 100%;\n  padding: ${(props) => props.theme.mimir.spacing.base};\n  color: ${(props) => props.theme.mimir.color.text.base};\n\n  background-color: ${(props) => props.theme.mimir.color.pure.base};\n  color: ${(props) => props.theme.mimir.color.background.on};\n\n  :disabled {\n    color: ${(props) => props.theme.mimir.color.surface.variant.on};\n    background-color: ${(props) => props.theme.mimir.color.outline.base};\n  }\n\n  ${getTextRole(\"body-large\")};\n  ${focus};\n  ${placeholder};\n  ${sizingMixin};\n`;\n","import styled from \"styled-components\";\n\nexport type UserAutoCompleteItemElementProps = {\n  active: boolean;\n};\n\nexport const UserAutoCompleteContainer = styled.div``;\n\nexport const UserAutoCompleteItemContainer = styled.ul`\n  border: 1px solid ${(props) => props.theme.mimir.color.outline.base};\n  border-top-width: 0;\n  list-style: none;\n  margin-top: 3px;\n  max-height: 143px;\n  overflow-y: auto;\n  padding-left: 0;\n`;\n\nexport const UserAutoCompleteItemElement = styled.li<UserAutoCompleteItemElementProps>`\n  padding: 0.5rem;\n\n  &:active,\n  &:hover,\n  .user-active {\n    background-color: ${(props) => props.theme.mimir.color.primary.base};\n    color: ${(props) => props.theme.mimir.color.primary.on};\n    cursor: pointer;\n    font-weight: ${(props) => props.theme.mimir.typography.typeface.weights.bold};\n  }\n\n  &:not(:last-of-type) {\n    border-bottom: 1px solid ${(props) => props.theme.mimir.color.outline.base};\n  }\n\n  background-color: ${(props) => props.active && props.theme.mimir.color.primary.base};\n  color: ${(props) => props.active && props.theme.mimir.color.primary.on};\n  cursor: ${(props) => props.active && \"pointer\"};\n  font-weight: ${(props) => props.active && props.theme.mimir.typography.typeface.weights.bold};\n`;\n","import styled from \"styled-components\";\nimport { Palette, Sizing } from \"../../core/props\";\nimport { focus, paletteMixin, sizingMixin, translucify } from \"../../core/theme/helpers\";\n\nexport type PopoverContentProps = Sizing & Palette;\n\nexport const PopoverContent = styled.div<PopoverContentProps>`\n  padding: ${(props) => props.theme.mimir.spacing.xl};\n  border-radius: ${(props) => props.theme.mimir.border.radius.large};\n  background-color: ${(props) => translucify(props.theme.mimir.color.surface.base, 0.98)};\n  color: ${(props) => props.theme.mimir.color.surface.on};\n  box-shadow: ${(props) => props.theme.mimir.shadow.small};\n  ${paletteMixin};\n  ${sizingMixin};\n  ${focus};\n`;\n","import * as Switch from \"@radix-ui/react-switch\";\nimport styled from \"styled-components\";\n\nexport const SwitchRoot = styled(Switch.Root)`\n  all: unset;\n  width: 42px;\n  height: 25px;\n  background-color: ${(props) => props.theme.mimir.color.surface.variant.base};\n  border-radius: 9999px;\n  position: relative;\n  box-shadow: ${(props) => props.theme.mimir.shadow.small};\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n\n  :hover {\n    cursor: pointer;\n    background-color: ${(props) => props.theme.mimir.color.secondary.container?.base};\n  }\n\n  :focus {\n    box-shadow: ${(props) => props.theme.mimir.shadow.small};\n  }\n`;\n\nexport const SwitchThumb = styled(Switch.Thumb)`\n  display: block;\n  width: 21px;\n  height: 21px;\n  background-color: ${(props) => props.theme.mimir.color.text.on};\n  border-radius: 9999px;\n  box-shadow: ${(props) => props.theme.mimir.shadow.small};\n  transition: transform 100ms;\n  transform: translateX(2px);\n  will-change: transform;\n\n  &[data-state=\"checked\"] {\n    transform: translateX(19px);\n    background-color: ${(props) => props.theme.mimir.color.primary.base};\n  }\n`;\n","import styled from \"styled-components\";\r\nimport { spacingMixin } from \"../../../components/core/theme/helpers\";\r\nimport { Spacings } from \"../../core/props\";\r\n\r\nexport type InspectorHeaderProps = {\r\n  bgColor?: string;\r\n};\r\n\r\ninterface InspectorTabHeaderProps {\r\n  active: boolean;\r\n  color: string;\r\n}\r\n\r\n/**\r\n * Removes styles from react router links.\r\n * Useful when wrapping other elements with navigation semantics.\r\n */\r\nexport const InspectorHeader = styled.div<InspectorHeaderProps>`\r\n  display: flex;\r\n  align-items: center;\r\n  background-color: ${(props) => (props.bgColor != null ? props.bgColor : \"inherit\")};\r\n  height: 44px;\r\n`;\r\n\r\n/**\r\n * Removes styles from react router links.\r\n * Useful when wrapping other elements with navigation semantics.\r\n */\r\nexport const InspectorHeaderContent = styled.div<Spacings>`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  ${spacingMixin};\r\n`;\r\n\r\nexport const InspectorContent = styled.div<Spacings>`\r\n  ${spacingMixin};\r\n`;\r\n\r\n/**\r\n * Removes styles from react router links.\r\n * Useful when wrapping other elements with navigation semantics.\r\n */\r\nexport const InspectorTabHeader = styled.div<InspectorTabHeaderProps>`\r\n  pointer-events: initial;\r\n  box-sizing: border-box;\r\n  min-width: 120px;\r\n  border-top-right-radius: 6px;\r\n  border-top-left-radius: 6px;\r\n  color: #000;\r\n  margin-right: 7px;\r\n  height: ${(props) => (props.active ? 44 : 35)}px;\r\n  margin-top: ${(props) => (props.active ? 0 : 9)}px;\r\n  background-color: ${(props) => (props.active ? props.theme.mimir.color.reference.neutral[99] : props.color)};\r\n  padding: ${(props) => (props.active ? \"17px 14px 0px 14px;\" : \"8px 14px 0px 14px\")};\r\n  box-shadow: -4px 0 4px -5px rgba(0, 0, 0, 0.4), 4px 0 3px -5px rgba(0, 0, 0, 0.4);\r\n\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n  p {\r\n    bottom: ${(props: { active: boolean }) => (props.active ? 20 : 16)}px;\r\n    font-weight: ${(props) => props.active && props.theme.mimir.typography.typeface.weights.bold};\r\n    text-align: center;\r\n  }\r\n`;\r\n"],"names":[],"sourceRoot":""}