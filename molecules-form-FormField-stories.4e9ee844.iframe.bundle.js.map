{"version":3,"file":"molecules-form-FormField-stories.4e9ee844.iframe.bundle.js","mappings":";;AAiBA;AACA;;AAEA;;AC2BA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AClDA;AACA;;AAEA;ACJA;AACA;AAGA;ACHA;;AC4CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;;AClDA;AACA;AAQA;;ACTA;AAQA;ACfA;AACA;AACA;AACA;;;;;ACLA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;;;;;AAKA;AACA;AACA;AACA;AAGA;;;;AAIA;AACA;AACA","sources":["webpack://@mimirorg/component-library/./src/components/atoms/media/Icon.ts","webpack://@mimirorg/component-library/./src/components/atoms/text/Text.tsx","webpack://@mimirorg/component-library/./src/components/icons/common/svgMixin.ts","webpack://@mimirorg/component-library/./src/components/icons/logo/LogoIcon.tsx","webpack://@mimirorg/component-library/./src/components/icons/library/LibraryIcon.tsx","webpack://@mimirorg/component-library/./src/components/layouts/Box.styled.tsx","webpack://@mimirorg/component-library/./src/components/layouts/Flexbox.styled.tsx","webpack://@mimirorg/component-library/./src/components/layouts/Gridbox.styled.tsx","webpack://@mimirorg/component-library/./src/components/molecules/form/FormField.styled.ts","webpack://@mimirorg/component-library/./src/components/molecules/inputs/input/Input.styled.ts"],"sourcesContent":["import { ImgHTMLAttributes } from \"react\";\nimport styled from \"styled-components\";\nimport { Sizing } from \"./../../core/props\";\nimport { sizingMixin } from \"../../core/theme/helpers\";\n\nexport type IconProps = ImgHTMLAttributes<HTMLImageElement> &\n  Sizing & {\n    size?: number;\n  };\n\n/**\n * A simple wrapper over the img-tag\n * Has a default width and height of 1em\n * @param size sets height and width of icon\n */\nexport const Icon = styled.img<IconProps>`\n  display: inline-block;\n  width: ${(props) => (props.size ? `${props.size}px` : \"1em\")};\n  height: ${(props) => (props.size ? `${props.size}px` : \"1em\")};\n  line-height: 1;\n  ${sizingMixin};\n`;\n","import { ElementType } from \"react\";\nimport styled from \"styled-components\";\nimport {\n  displayMixin,\n  ellipsisMixin,\n  getTextRole,\n  paletteMixin,\n  sizingMixin,\n  spacingMixin,\n  typographyMixin,\n} from \"../../core/theme/helpers\";\nimport { Display, Ellipsis, Palette, Polymorphic, Sizing, Spacings, TextVariant, Typography } from \"./../../core/props\";\n\nexport type TextProps = Spacings &\n  Sizing &\n  Pick<Palette, \"color\" | \"bgColor\"> &\n  Pick<Display, \"whiteSpace\" | \"display\" | \"overflow\" | \"textOverflow\" | \"visibility\"> &\n  Pick<\n    Typography,\n    | \"font\"\n    | \"fontSize\"\n    | \"fontWeight\"\n    | \"textAlign\"\n    | \"textTransform\"\n    | \"wordBreak\"\n    | \"fontFamily\"\n    | \"fontStyle\"\n    | \"letterSpacing\"\n    | \"lineHeight\"\n  > &\n  Polymorphic<ElementType> &\n  TextVariant &\n  Ellipsis & {\n    htmlFor?: string;\n  };\n\n/**\n * A polymorphic text component for non-heading text\n *\n * @param as element to display component as (defaults to <p>)\n * @param font overrides font of text element\n * @param fontSize overrides default size of the text element\n * @param fontWeight overrides default font-weight of the text element\n * @param color overrides default color of the text element\n * @constructor\n */\nexport const Text = styled.p<TextProps>`\n  ${({ variant }) => getTextRole(variant)};\n  ${spacingMixin};\n  ${paletteMixin};\n  ${displayMixin};\n  ${ellipsisMixin};\n  ${typographyMixin};\n  ${sizingMixin};\n`;\n\nText.displayName = \"Text\";\n\nText.defaultProps = {\n  useEllipsis: false,\n  ellipsisMaxLines: 1,\n  htmlFor: \"\",\n};\n","import { css } from \"styled-components\";\nimport { sizingMixin } from \"../../core/theme/helpers\";\nimport { SvgProps } from \"./svgProps\";\n\nexport const svgMixin = css<SvgProps>`\n  display: inline-block;\n  width: ${(props) => (props.size ? `${props.size}px` : \"1em\")};\n  height: ${(props) => (props.size ? `${props.size}px` : \"1em\")};\n  line-height: 1;\n  ${sizingMixin};\n`;\n","import Logo from \"./logo.jsx.svg\";\nimport styled from \"styled-components\";\nimport { SvgProps } from \"../common/svgProps\";\nimport { svgMixin } from \"../common/svgMixin\";\n\nexport const LogoIcon = styled(Logo)<SvgProps>`\n  ${svgMixin};\n`;\n\nLogoIcon.defaultProps = {\n  width: \"100px\",\n  height: \"25px\",\n};\n","import Library from \"./library.jsx.svg\";\nimport styled from \"styled-components\";\nimport { SvgProps } from \"../common/svgProps\";\nimport { svgMixin } from \"../common/svgMixin\";\n\nexport const LibraryIcon = styled(Library)<SvgProps>`\n  ${svgMixin};\n`;\n","import { ElementType } from \"react\";\nimport styled from \"styled-components\";\nimport {\n  Borders,\n  Display,\n  Flex,\n  Grid,\n  Palette,\n  Polymorphic,\n  Positions,\n  Shadows,\n  Sizing,\n  Spacings,\n} from \"../core/props\";\nimport {\n  bordersMixin,\n  displayMixin,\n  flexMixin,\n  focus,\n  gridMixin,\n  paletteMixin,\n  positionsMixin,\n  shadowsMixin,\n  sizingMixin,\n  spacingMixin,\n} from \"../core/theme/helpers\";\nimport { motion } from \"framer-motion\";\n\nexport type BoxProps = Display &\n  Positions &\n  Flex &\n  Grid &\n  Palette &\n  Sizing &\n  Spacings &\n  Borders &\n  Shadows &\n  Polymorphic<ElementType>;\n\n/**\n * A polymorphic layout component for a box element.\n *\n * Since many components often need a generic box for layout purposes this component exposes flexbox and grid properties\n * in addition to properties related to display, positions, palette, sizing, spacing, borders, shadows etc.\n *\n * @param as polymorphic parameter for changing base element (defaults to <div>)\n * @param props can receive all the css properties related to the aforementioned interfaces: palette, sizing etc...\n * @constructor\n */\nexport const Box = styled.div<BoxProps>`\n  ${focus};\n  ${displayMixin};\n  ${flexMixin};\n  ${gridMixin};\n  ${positionsMixin};\n  ${sizingMixin};\n  ${bordersMixin};\n  ${paletteMixin};\n  ${shadowsMixin};\n  ${spacingMixin};\n`;\n\n/**\n * An animation wrapper for the Box component\n *\n * @see https://github.com/framer/motion\n */\nexport const MotionBox = motion(Box);\n","import { ElementType } from \"react\";\nimport styled from \"styled-components\";\nimport { Flex, Polymorphic } from \"./../core/props/\";\nimport { flexMixin, focus } from \"../core/theme/helpers\";\nimport { motion } from \"framer-motion\";\n\nexport type FlexBoxProps = Flex & Polymorphic<ElementType>;\n\n/**\n * A polymorphic layout component for flexbox behaviour.\n *\n * @param as polymorphic parameter for changing base element (defaults to <div>)\n * @param props can receive all standard css flexbox properties\n * @constructor\n */\nexport const Flexbox = styled.div<FlexBoxProps>`\n  display: flex;\n  ${focus};\n  ${flexMixin};\n`;\n\n/**\n * An animation wrapper for the Flexbox component\n *\n * @see https://github.com/framer/motion\n */\nexport const MotionFlexbox = motion(Flexbox);\n","import { ElementType } from \"react\";\nimport styled from \"styled-components\";\nimport { Grid, Polymorphic } from \"../core/props\";\nimport { gridMixin } from \"../core/theme/helpers\";\nimport { motion } from \"framer-motion\";\n\nexport type GridboxProps = Grid & Polymorphic<ElementType>;\n\n/**\n * A polymorphic layout component for grid behaviour.\n *\n * @param as polymorphic parameter for changing base element (defaults to <div>)\n * @param props can receive all standard css grid properties\n * @constructor\n */\nexport const Gridbox = styled.div<GridboxProps>`\n  display: grid;\n  ${gridMixin};\n`;\n\n/**\n * An animation wrapper for the Grid component\n *\n * @see https://github.com/framer/motion\n */\nexport const MotionGridbox = motion(Gridbox);\n","import styled from \"styled-components\";\nimport { TextTypes } from \"../../core/props\";\nimport { getTextRole } from \"../../core/theme/helpers\";\n\ninterface FormFieldLabelTextProps {\n  indent?: boolean;\n  variant: TextTypes;\n}\n\nexport const FormFieldLabelText = styled.span<FormFieldLabelTextProps>`\n  ${({ variant }) => getTextRole(variant)}\n  color: ${(props) => props.theme.mimir.color.text.base};\n  padding-left: ${(props) => props.indent && props.theme.mimir.spacing.l};\n  border-left: ${(props) => props.indent && \"1px solid transparent\"};\n`;\n","import styled from \"styled-components\";\nimport { focus, getTextRole, placeholder, sizingMixin } from \"../../../core/theme/helpers\";\nimport { InputProps } from \"./Input\";\n\nexport const InputContainer = styled.input<InputProps>`\n  height: 100%;\n  width: 100%;\n\n  border: 1px solid ${(props) => props.theme.mimir.color.outline.base};\n  border-radius: ${(props) => props.theme.mimir.border.radius.medium};\n  padding: ${(props) => props.theme.mimir.spacing.base} ${(props) => props.theme.mimir.spacing.l};\n  padding-right: ${(props) => props.icon && props.iconPlacement === \"right\" && props.theme.mimir.spacing.multiple(6)};\n  padding-left: ${(props) => props.icon && props.iconPlacement === \"left\" && props.theme.mimir.spacing.multiple(6)};\n\n  background-color: ${(props) => props.theme.mimir.color.pure.base};\n  color: ${(props) => props.theme.mimir.color.background.on};\n\n  :disabled {\n    color: ${(props) => props.theme.mimir.color.surface.variant.on};\n    background-color: ${(props) => props.theme.mimir.color.outline.base};\n  }\n\n  box-sizing: border-box;\n\n  ${getTextRole(\"body-large\")};\n  ${sizingMixin};\n  ${placeholder};\n  ${focus};\n`;\n\nexport const InputIconContainer = styled.span<InputProps>`\n  position: absolute;\n  top: 50%;\n  transform: translate(0, -50%);\n  left: ${(props) => props.icon && props.iconPlacement === \"left\" && props.theme.mimir.spacing.xl};\n  right: ${(props) => props.icon && props.iconPlacement === \"right\" && props.theme.mimir.spacing.xl};\n  color: ${(props) => props.theme.mimir.color.primary.base};\n  line-height: 0;\n\n  img,\n  svg {\n    width: 24px;\n    height: 24px;\n  }\n`;\n"],"names":[],"sourceRoot":""}