{"version":3,"file":"main.9355b36e.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;;;AAGA;;;;;AAKA;AACA;;AAEA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;;AAKA;;;;;;;;;;AAUA;AACA;;;;AAIA;;;;;;;;;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;;;;AAUA;;;AAIA;;AAJA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AAMA;AAMA;AACA;AACA;AACA;;AAEA;AACA;AAMA;AAMA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACDA;AACA;AACA;AACA;ACTA;;AAQA;;AAEA;;ACXA;;AAEA;AACA;AACA;AACA","sources":["webpack://@mimirorg/component-library/./src/components/core/globals/globalStyle.ts","webpack://@mimirorg/component-library/./src/components/core/theme/helpers/mixins/bordersMixin.ts","webpack://@mimirorg/component-library/./src/components/core/theme/helpers/mixins/displayMixin.ts","webpack://@mimirorg/component-library/./src/components/core/theme/helpers/mixins/ellipsisMixin.ts","webpack://@mimirorg/component-library/./src/components/core/theme/helpers/mixins/flexMixin.ts","webpack://@mimirorg/component-library/./src/components/core/theme/helpers/mixins/gridMixin.ts","webpack://@mimirorg/component-library/./src/components/core/theme/helpers/mixins/paletteMixin.ts","webpack://@mimirorg/component-library/./src/components/core/theme/helpers/mixins/positionsMixin.ts","webpack://@mimirorg/component-library/./src/components/core/theme/helpers/mixins/shadowsMixin.ts","webpack://@mimirorg/component-library/./src/components/core/theme/helpers/mixins/sizingMixin.ts","webpack://@mimirorg/component-library/./src/components/core/theme/helpers/mixins/spacingMixin.ts","webpack://@mimirorg/component-library/./src/components/core/theme/helpers/mixins/typographyMixin.ts","webpack://@mimirorg/component-library/./src/components/core/theme/helpers/utils/getTextRole.ts","webpack://@mimirorg/component-library/./src/components/core/theme/helpers/common/focus.ts","webpack://@mimirorg/component-library/./src/components/core/theme/helpers/common/placeholder.ts"],"sourcesContent":["import { createGlobalStyle } from \"styled-components\";\nimport { getTextRole } from \"../theme/helpers\";\nimport { globalResetStyle } from \"./globalResetStyle\";\n\nexport const GlobalStyle = createGlobalStyle`\n  ${globalResetStyle};\n\n  body {\n    background: ${({ theme }) => theme.mimir.color.background.base};\n  }\n\n  // Global typography styles\n  body {\n    font-family: ${({ theme }) => theme.mimir.typography.typeface.brand};\n    font-weight: ${({ theme }) => theme.mimir.typography.typeface.weights.normal};\n    font-size: 100%;\n    color: ${({ theme }) => theme.mimir.color.text.base};\n  }\n\n  h1 {\n    ${getTextRole(\"display-large\")};\n  }\n\n  h2 {\n    ${getTextRole(\"display-medium\")};\n  }\n\n  h3 {\n    ${getTextRole(\"display-small\")};\n  }\n\n  h4 {\n    ${getTextRole(\"headline-large\")};\n  }\n\n  h5 {\n    ${getTextRole(\"headline-medium\")};\n  }\n\n  h6 {\n    ${getTextRole(\"headline-small\")};\n  }\n\n  p,\n  a {\n    ${getTextRole(\"body-large\")};\n  }\n\n  a:hover {\n    text-decoration: underline;\n    cursor: pointer;\n  }\n\n  b,\n  strong {\n    ${getTextRole(\"body-large\")};\n    font-weight: ${({ theme }) => theme.mimir.typography.typeface.weights.bold};\n  }\n\n  small {\n    ${getTextRole(\"body-small\")};\n  }\n\n  ::-webkit-scrollbar {\n    width: 14px;\n    height: 18px;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    border: 4px solid rgba(0, 0, 0, 0);\n    background-clip: padding-box;\n    border-radius: 7px;\n    background-color: #C4C4C4;\n  }\n\n  ::-webkit-scrollbar-track {\n    background-color: transparent;\n  }\n`;\n","import { css } from \"styled-components\";\nimport { Borders } from \"../../../props/borders\";\n\nexport const bordersMixin = css<Borders>`\n  border: ${(props) => props.border};\n  border-top: ${(props) => props.borderTop};\n  border-left: ${(props) => props.borderLeft};\n  border-right: ${(props) => props.borderRight};\n  border-bottom: ${(props) => props.borderBottom};\n  border-color: ${(props) => props.borderColor};\n  border-top-color: ${(props) => props.borderTopColor};\n  border-right-color: ${(props) => props.borderRightColor};\n  border-bottom-color: ${(props) => props.borderBottomColor};\n  border-left-color: ${(props) => props.borderLeftColor};\n  border-radius: ${(props) => props.borderRadius};\n`;\n","import { css } from \"styled-components\";\nimport { Display } from \"../../../props/display\";\n\nexport const displayMixin = css<Display>`\n  display: ${(props) => props.display};\n  overflow: ${(props) => props.overflow};\n  text-overflow: ${(props) => props.textOverflow};\n  visibility: ${(props) => props.visibility};\n  white-space: ${(props) => props.whiteSpace};\n`;\n","import { css } from \"styled-components\";\nimport { Ellipsis } from \"../../../props/ellipsis\";\n\nexport const ellipsisMixin = css<Ellipsis>`\n  ${({ useEllipsis, ellipsisMaxLines }) => {\n    if (!useEllipsis) return \"\";\n\n    if (ellipsisMaxLines === 1)\n      return css`\n        text-overflow: ellipsis;\n        overflow: hidden;\n        white-space: nowrap;\n      `;\n\n    if (ellipsisMaxLines && ellipsisMaxLines > 1)\n      return css`\n        display: -webkit-box;\n        -webkit-box-orient: vertical;\n        -webkit-line-clamp: ${ellipsisMaxLines};\n        overflow: hidden;\n      `;\n  }}\n`;\n","import { css } from \"styled-components\";\nimport { Flex } from \"../../../props/flex\";\n\nexport const flexMixin = css<Flex>`\n  flex: ${(props) => props.flex};\n  flex-grow: ${(props) => props.flexGrow};\n  flex-wrap: ${(props) => props.flexWrap};\n  flex-shrink: ${(props) => props.flexShrink};\n  flex-direction: ${(props) => props.flexDirection};\n  flex-flow: ${(props) => props.flexFlow};\n  justify-content: ${(props) => props.justifyContent};\n  align-items: ${(props) => props.alignItems};\n  align-content: ${(props) => props.alignContent};\n  align-self: ${(props) => props.alignSelf};\n  order: ${(props) => props.order};\n  gap: ${(props) => props.gap};\n`;\n","import { css } from \"styled-components\";\nimport { Grid } from \"../../../props/grid\";\n\nexport const gridMixin = css<Grid>`\n  gap: ${(props) => props.gap};\n  column-gap: ${(props) => props.columnGap};\n  row-gap: ${(props) => props.rowGap};\n  grid-column: ${(props) => props.gridColumn};\n  grid-row: ${(props) => props.gridRow};\n  grid-auto-flow: ${(props) => props.gridAutoFlow};\n  grid-auto-columns: ${(props) => props.gridAutoColumns};\n  grid-auto-rows: ${(props) => props.gridAutoRows};\n  grid-template-columns: ${(props) => props.gridTemplateColumns};\n  grid-template-rows: ${(props) => props.gridTemplateRows};\n  grid-template-areas: ${(props) => props.gridTemplateAreas};\n  grid-area: ${(props) => props.gridArea};\n  justify-items: ${(props) => props.alignItems};\n  align-items: ${(props) => props.alignItems};\n  place-items: ${(props) => props.placeItems};\n  justify-content: ${(props) => props.justifyContent};\n  align-content: ${(props) => props.alignContent};\n  place-content: ${(props) => props.placeContent};\n  justify-self: ${(props) => props.justifySelf};\n  align-self: ${(props) => props.alignSelf};\n  place-self: ${(props) => props.placeSelf};\n`;\n","import { css } from \"styled-components\";\nimport { Palette } from \"../../../props/palette\";\n\nexport const paletteMixin = css<Palette>`\n  color: ${(props) => props.color};\n  background-color: ${(props) => props.bgColor};\n`;\n","import { css } from \"styled-components\";\nimport { Positions } from \"../../../props/positions\";\n\nexport const positionsMixin = css<Positions>`\n  position: ${(props) => props.position};\n  z-index: ${(props) => props.zIndex};\n  top: ${(props) => props.top};\n  right: ${(props) => props.right};\n  bottom: ${(props) => props.bottom};\n  left: ${(props) => props.left};\n`;\n","import { css } from \"styled-components\";\nimport { Shadows } from \"../../../props/shadows\";\n\nexport const shadowsMixin = css<Shadows>`\n  box-shadow: ${(props) => props.boxShadow};\n`;\n","import { css } from \"styled-components\";\nimport { Sizing } from \"../../../props/sizing\";\n\nexport const sizingMixin = css<Sizing>`\n  width: ${(props) => props.width};\n  max-width: ${(props) => props.maxWidth};\n  min-width: ${(props) => props.minWidth};\n  height: ${(props) => props.height};\n  max-height: ${(props) => props.maxHeight};\n  min-height: ${(props) => props.minHeight};\n  box-sizing: ${(props) => props.boxSizing};\n`;\n","import { css } from \"styled-components\";\nimport { Spacings } from \"../../../props\";\n\nexport const spacingMixin = css<Spacings>`\n  padding: ${(props) => props.spacing?.p};\n  ${(props) =>\n    props.spacing?.px &&\n    `\n    padding-left: ${props.spacing?.px};\n    padding-right: ${props.spacing?.px};\n  `}\n  ${(props) =>\n    props.spacing?.py &&\n    `\n    padding-top: ${props.spacing?.py};\n    padding-bottom: ${props.spacing?.py};\n  `}\n  padding-top: ${(props) => props.spacing?.pt};\n  padding-right: ${(props) => props.spacing?.pr};\n  padding-bottom: ${(props) => props.spacing?.pb};\n  padding-left: ${(props) => props.spacing?.pl};\n\n  margin: ${(props) => props.spacing?.m};\n  ${(props) =>\n    props.spacing?.mx &&\n    `\n    margin-left: ${props.spacing?.mx};\n    margin-right: ${props.spacing?.mx};\n  `}\n  ${(props) =>\n    props.spacing?.my &&\n    `\n    margin-top: ${props.spacing?.my};\n    margin-bottom: ${props.spacing?.my};\n  `}\n  margin-top: ${(props) => props.spacing?.mt};\n  margin-right: ${(props) => props.spacing?.mr};\n  margin-bottom: ${(props) => props.spacing?.mb};\n  margin-left: ${(props) => props.spacing?.ml};\n`;\n","import { css } from \"styled-components\";\nimport { Typography } from \"../../../props/typography\";\n\nexport const typographyMixin = css<Typography>`\n  font: ${(props) => props.font};\n  font-family: ${(props) => props.fontFamily};\n  font-size: ${(props) => props.fontSize};\n  font-style: ${(props) => props.fontStyle};\n  font-weight: ${(props) => props.fontWeight};\n  letter-spacing: ${(props) => props.letterSpacing};\n  line-height: ${(props) => props.lineHeight};\n  text-align: ${(props) => props.textAlign};\n  text-transform: ${(props) => props.textTransform};\n  word-break: ${(props) => props.wordBreak};\n`;\n","import { TextTypes } from \"../../../props\";\nimport { NominalScale, TypographyRoles } from \"../../props\";\nimport { theme } from \"../../variables/theme\";\nimport { css } from \"styled-components\";\n\nexport const getTextRole = (variant?: TextTypes) => {\n  if (!variant) return \"\";\n\n  const [type, size] = variant.split(\"-\");\n  const textType = theme.typography.roles[type as keyof TypographyRoles][size as keyof NominalScale];\n\n  return css`\n    font: ${textType.font};\n    letter-spacing: ${textType.letterSpacing};\n    line-height: ${textType.lineHeight};\n  `;\n};\n","import { css } from \"styled-components\";\n\n/**\n * Focus styles without pseudo-class wrapper\n */\nexport const focusRaw = css`\n  outline: 1px solid ${(props) => props.theme.mimir.color.primary.base};\n  outline-offset: 1px;\n`;\n\n/**\n * Common focus style for several components.\n * Uses :focus-visible as pseudo-class.\n */\nexport const focus = css`\n  :focus-visible {\n    ${focusRaw};\n  }\n`;\n","import { css } from \"styled-components\";\n\n/**\n * Common placeholder style for several components\n */\nexport const placeholder = css`\n  ::placeholder {\n    font: ${(props) => props.theme.mimir.typography.roles.body.medium.font};\n    letter-spacing: ${(props) => props.theme.mimir.typography.roles.body.medium.letterSpacing};\n    line-height: ${(props) => props.theme.mimir.typography.roles.body.medium.lineHeight};\n    color: ${(props) => props.theme.mimir.color.outline.base};\n  }\n`;\n"],"names":[],"sourceRoot":""}