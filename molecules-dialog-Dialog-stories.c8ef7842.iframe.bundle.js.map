{"version":3,"file":"molecules-dialog-Dialog-stories.c8ef7842.iframe.bundle.js","mappings":";;;;;;;;;;AAkBA;;AAEA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AAGA;;;AAGA;ACIA;ACWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;;AClDA;AACA;AAQA;;ACTA;AAQA;;;AClBA;AACA;AAGA;;AAEA;;;AAGA;AACA;;;;AAIA;;;;AAIA;;AAIA;;;;;;;;;;;;AAYA;AACA;;;AAUA","sources":["webpack://@mimirorg/component-library/./src/components/molecules/dialog/Dialog.styled.ts","webpack://@mimirorg/component-library/./src/components/molecules/dialog/Dialog.tsx","webpack://@mimirorg/component-library/./src/components/layouts/Box.styled.tsx","webpack://@mimirorg/component-library/./src/components/layouts/Flexbox.styled.tsx","webpack://@mimirorg/component-library/./src/components/layouts/Gridbox.styled.tsx","webpack://@mimirorg/component-library/./src/components/molecules/inputs/radio/RadioButton.styled.tsx"],"sourcesContent":["import { motion } from \"framer-motion\";\nimport styled from \"styled-components\";\nimport { Flex, Sizing } from \"../../core/props\";\nimport { flexMixin, sizingMixin, translucify } from \"../../core/theme/helpers\";\nimport { Box } from \"../../layouts\";\n\nexport type DialogContentProps = Sizing & Flex;\n\nexport const DialogContent = styled(Box)<DialogContentProps>`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: ${(props) => props.theme.mimir.spacing.xxxl};\n\n  background-color: ${(props) => props.theme.mimir.color.surface.base};\n  border-radius: ${(props) => props.theme.mimir.border.radius.large};\n\n  min-height: 380px;\n  padding: ${(props) => props.theme.mimir.spacing.multiple(6)};\n\n  box-shadow: ${(props) => props.theme.mimir.shadow.small};\n\n  ${sizingMixin};\n  ${flexMixin};\n`;\n\nexport const DialogOverlay = styled(motion.div)`\n  position: fixed;\n  inset: 0;\n  background-color: ${(props) => translucify(props.theme.mimir.color.primary.base, 0.08)};\n`;\n","import * as DialogPrimitive from \"@radix-ui/react-dialog\";\nimport { forwardRef, ReactNode } from \"react\";\nimport { useTheme } from \"styled-components\";\nimport { Box } from \"../../layouts\";\nimport { DialogDescription } from \"./components/DialogDescription\";\nimport { DialogExit } from \"./components/DialogExit\";\nimport { DialogTitle } from \"./components/DialogTitle\";\nimport { DialogContent, DialogContentProps, DialogOverlay } from \"./Dialog.styled\";\n\nexport type DialogProps = Pick<DialogPrimitive.DialogProps, \"open\" | \"onOpenChange\"> &\n  DialogContentProps & {\n    children?: ReactNode;\n    content: ReactNode;\n    title: string;\n    description?: string;\n    hideTitle?: boolean;\n    hideDescription?: boolean;\n    closeText?: string;\n  };\n\n/**\n * Component which is overlaid the primary window, rendering the content underneath inert.\n * Can operate in both a controlled and uncontrolled mode by utilizing open and onOpenChange properties.\n *\n * See documentation link below for details.\n * @see https://www.radix-ui.com/docs/primitives/components/dialog\n *\n * @param children component that triggers dialog visibility\n * @param content shown inside the dialog itself\n * @param open property for overriding the open state of the dialog\n * @param onOpenChange event handler called when the open state of the dialog changes\n * @param title required title of dialog (can be hidden visually with hideTitle prop)\n * @param description optional description of dialog\n * @param hideTitle hides the title from view while remaining readable by screen-readers\n * @param hideDescription hides the description from view while remaining readable by screen-readers\n * @param closeText property for overriding the default text for closing the dialog (screen-readers)\n * @param delegated receives sizing and flexbox props for overriding default styles\n * @constructor\n */\nexport const Dialog = forwardRef<HTMLButtonElement, DialogProps>(\n  (\n    {\n      children,\n      content,\n      open,\n      onOpenChange,\n      title,\n      hideTitle,\n      description,\n      hideDescription,\n      closeText,\n      ...delegated\n    }: DialogProps,\n    ref\n  ) => {\n    const theme = useTheme();\n\n    return (\n      <DialogPrimitive.Root open={open} onOpenChange={onOpenChange}>\n        <DialogPrimitive.Trigger asChild ref={ref}>\n          {children}\n        </DialogPrimitive.Trigger>\n\n        <DialogPrimitive.Portal>\n          <DialogPrimitive.Overlay asChild>\n            <DialogOverlay {...theme.mimir.animation.fade} />\n          </DialogPrimitive.Overlay>\n          <DialogPrimitive.Content asChild>\n            <DialogContent {...theme.mimir.animation.fade} {...delegated}>\n              <Box display={\"flex\"} flexDirection={\"column\"} gap={theme.mimir.spacing.xl} maxWidth={\"50ch\"}>\n                <DialogTitle hide={hideTitle}>{title}</DialogTitle>\n                {description && <DialogDescription hide={hideDescription}>{description}</DialogDescription>}\n              </Box>\n              {content}\n              <DialogExit closeText={closeText} />\n            </DialogContent>\n          </DialogPrimitive.Content>\n        </DialogPrimitive.Portal>\n      </DialogPrimitive.Root>\n    );\n  }\n);\n\nDialog.displayName = \"Dialog\";\nDialog.defaultProps = {};\n","import { ElementType } from \"react\";\nimport styled from \"styled-components\";\nimport {\n  Borders,\n  Display,\n  Flex,\n  Grid,\n  Palette,\n  Polymorphic,\n  Positions,\n  Shadows,\n  Sizing,\n  Spacings,\n} from \"../core/props\";\nimport {\n  bordersMixin,\n  displayMixin,\n  flexMixin,\n  focus,\n  gridMixin,\n  paletteMixin,\n  positionsMixin,\n  shadowsMixin,\n  sizingMixin,\n  spacingMixin,\n} from \"../core/theme/helpers\";\nimport { motion } from \"framer-motion\";\n\nexport type BoxProps = Display &\n  Positions &\n  Flex &\n  Grid &\n  Palette &\n  Sizing &\n  Spacings &\n  Borders &\n  Shadows &\n  Polymorphic<ElementType>;\n\n/**\n * A polymorphic layout component for a box element.\n *\n * Since many components often need a generic box for layout purposes this component exposes flexbox and grid properties\n * in addition to properties related to display, positions, palette, sizing, spacing, borders, shadows etc.\n *\n * @param as polymorphic parameter for changing base element (defaults to <div>)\n * @param props can receive all the css properties related to the aforementioned interfaces: palette, sizing etc...\n * @constructor\n */\nexport const Box = styled.div<BoxProps>`\n  ${focus};\n  ${displayMixin};\n  ${flexMixin};\n  ${gridMixin};\n  ${positionsMixin};\n  ${sizingMixin};\n  ${bordersMixin};\n  ${paletteMixin};\n  ${shadowsMixin};\n  ${spacingMixin};\n`;\n\n/**\n * An animation wrapper for the Box component\n *\n * @see https://github.com/framer/motion\n */\nexport const MotionBox = motion(Box);\n","import { ElementType } from \"react\";\nimport styled from \"styled-components\";\nimport { Flex, Polymorphic } from \"./../core/props/\";\nimport { flexMixin, focus } from \"../core/theme/helpers\";\nimport { motion } from \"framer-motion\";\n\nexport type FlexBoxProps = Flex & Polymorphic<ElementType>;\n\n/**\n * A polymorphic layout component for flexbox behaviour.\n *\n * @param as polymorphic parameter for changing base element (defaults to <div>)\n * @param props can receive all standard css flexbox properties\n * @constructor\n */\nexport const Flexbox = styled.div<FlexBoxProps>`\n  display: flex;\n  ${focus};\n  ${flexMixin};\n`;\n\n/**\n * An animation wrapper for the Flexbox component\n *\n * @see https://github.com/framer/motion\n */\nexport const MotionFlexbox = motion(Flexbox);\n","import { ElementType } from \"react\";\nimport styled from \"styled-components\";\nimport { Grid, Polymorphic } from \"../core/props\";\nimport { gridMixin } from \"../core/theme/helpers\";\nimport { motion } from \"framer-motion\";\n\nexport type GridboxProps = Grid & Polymorphic<ElementType>;\n\n/**\n * A polymorphic layout component for grid behaviour.\n *\n * @param as polymorphic parameter for changing base element (defaults to <div>)\n * @param props can receive all standard css grid properties\n * @constructor\n */\nexport const Gridbox = styled.div<GridboxProps>`\n  display: grid;\n  ${gridMixin};\n`;\n\n/**\n * An animation wrapper for the Grid component\n *\n * @see https://github.com/framer/motion\n */\nexport const MotionGridbox = motion(Gridbox);\n","import * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\";\nimport { motion } from \"framer-motion\";\nimport styled from \"styled-components\";\n\nexport const RadioButtonRoot = styled(RadioGroupPrimitive.Root)`\n  all: unset;\n  display: flex;\n  flex-direction: ${(props) => props.orientation && props.orientation};\n  gap: ${(props) => props.theme.mimir.spacing.l};\n`;\n\nexport const RadioGroupItem = styled(RadioGroupPrimitive.Item)`\n  all: unset;\n  background-color: ${(props) => props.theme.mimir.color.surface.variant.base};\n  width: 20px;\n  height: 20px;\n  border-radius: ${(props) => props.theme.mimir.border.radius.round};\n  box-shadow: ${(props) => props.theme.mimir.shadow.small};\n\n  :hover {\n    cursor: pointer;\n    background-color: ${(props) => props.theme.mimir.color.secondary.container?.base};\n  }\n\n  :focus {\n    box-shadow: ${(props) => props.theme.mimir.shadow.small};\n  }\n`;\n\nexport const RadioGroupIndicator = styled(RadioGroupPrimitive.Indicator)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  position: relative;\n  &::after {\n    content: \"\";\n    display: block;\n    width: 50%;\n    height: 50%;\n    border-radius: ${(props) => props.theme.mimir.border.radius.round};\n    background-color: ${(props) => props.theme.mimir.color.primary.base};\n    margin: 25% auto;\n  }\n`;\n\n/**\n * An animation wrapper for the RadioButtonGroup component\n *\n * @see https://github.com/framer/motion\n */\nexport const MotionRadioButtonRoot = motion(RadioButtonRoot);\n"],"names":[],"sourceRoot":""}