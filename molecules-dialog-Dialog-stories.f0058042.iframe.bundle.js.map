{"version":3,"file":"molecules-dialog-Dialog-stories.f0058042.iframe.bundle.js","mappings":";;;;;;;;;;AAkBA;;AAEA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AAGA;;;AAGA;ACIA","sources":["webpack://@mimirorg/component-library/./src/components/molecules/dialog/Dialog.styled.ts","webpack://@mimirorg/component-library/./src/components/molecules/dialog/Dialog.tsx"],"sourcesContent":["import { motion } from \"framer-motion\";\nimport styled from \"styled-components\";\nimport { Flex, Sizing } from \"../../core/props\";\nimport { flexMixin, sizingMixin, translucify } from \"../../core/theme/helpers\";\nimport { Box } from \"../../layouts\";\n\nexport type DialogContentProps = Sizing & Flex;\n\nexport const DialogContent = styled(Box)<DialogContentProps>`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: ${(props) => props.theme.mimir.spacing.xxxl};\n\n  background-color: ${(props) => props.theme.mimir.color.surface.base};\n  border-radius: ${(props) => props.theme.mimir.border.radius.large};\n\n  min-height: 380px;\n  padding: ${(props) => props.theme.mimir.spacing.multiple(6)};\n\n  box-shadow: ${(props) => props.theme.mimir.shadow.small};\n\n  ${sizingMixin};\n  ${flexMixin};\n`;\n\nexport const DialogOverlay = styled(motion.div)`\n  position: fixed;\n  inset: 0;\n  background-color: ${(props) => translucify(props.theme.mimir.color.primary.base, 0.08)};\n`;\n","import * as DialogPrimitive from \"@radix-ui/react-dialog\";\nimport { forwardRef, ReactNode } from \"react\";\nimport { useTheme } from \"styled-components\";\nimport { Box } from \"../../layouts\";\nimport { DialogDescription } from \"./components/DialogDescription\";\nimport { DialogExit } from \"./components/DialogExit\";\nimport { DialogTitle } from \"./components/DialogTitle\";\nimport { DialogContent, DialogContentProps, DialogOverlay } from \"./Dialog.styled\";\n\nexport type DialogProps = Pick<DialogPrimitive.DialogProps, \"open\" | \"onOpenChange\"> &\n  DialogContentProps & {\n    children?: ReactNode;\n    content: ReactNode;\n    title: string;\n    description?: string;\n    hideTitle?: boolean;\n    hideDescription?: boolean;\n    closeText?: string;\n  };\n\n/**\n * Component which is overlaid the primary window, rendering the content underneath inert.\n * Can operate in both a controlled and uncontrolled mode by utilizing open and onOpenChange properties.\n *\n * See documentation link below for details.\n * @see https://www.radix-ui.com/docs/primitives/components/dialog\n *\n * @param children component that triggers dialog visibility\n * @param content shown inside the dialog itself\n * @param open property for overriding the open state of the dialog\n * @param onOpenChange event handler called when the open state of the dialog changes\n * @param title required title of dialog (can be hidden visually with hideTitle prop)\n * @param description optional description of dialog\n * @param hideTitle hides the title from view while remaining readable by screen-readers\n * @param hideDescription hides the description from view while remaining readable by screen-readers\n * @param closeText property for overriding the default text for closing the dialog (screen-readers)\n * @param delegated receives sizing and flexbox props for overriding default styles\n * @constructor\n */\nexport const Dialog = forwardRef<HTMLButtonElement, DialogProps>(\n  (\n    {\n      children,\n      content,\n      open,\n      onOpenChange,\n      title,\n      hideTitle,\n      description,\n      hideDescription,\n      closeText,\n      ...delegated\n    }: DialogProps,\n    ref\n  ) => {\n    const theme = useTheme();\n\n    return (\n      <DialogPrimitive.Root open={open} onOpenChange={onOpenChange}>\n        <DialogPrimitive.Trigger asChild ref={ref}>\n          {children}\n        </DialogPrimitive.Trigger>\n\n        <DialogPrimitive.Portal>\n          <DialogPrimitive.Overlay asChild>\n            <DialogOverlay {...theme.mimir.animation.fade} />\n          </DialogPrimitive.Overlay>\n          <DialogPrimitive.Content asChild>\n            <DialogContent {...theme.mimir.animation.fade} {...delegated}>\n              <Box display={\"flex\"} flexDirection={\"column\"} gap={theme.mimir.spacing.xl} maxWidth={\"50ch\"}>\n                <DialogTitle hide={hideTitle}>{title}</DialogTitle>\n                {description && <DialogDescription hide={hideDescription}>{description}</DialogDescription>}\n              </Box>\n              {content}\n              <DialogExit closeText={closeText} />\n            </DialogContent>\n          </DialogPrimitive.Content>\n        </DialogPrimitive.Portal>\n      </DialogPrimitive.Root>\n    );\n  }\n);\n\nDialog.displayName = \"Dialog\";\nDialog.defaultProps = {};\n"],"names":[],"sourceRoot":""}