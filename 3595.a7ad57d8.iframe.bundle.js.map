{"version":3,"file":"3595.a7ad57d8.iframe.bundle.js","mappings":";;;;AA4BA;AACA;;;;;AAKA;AACA;AACA;;;;;AAKA;AACA;;;;;;;;;;;;;;;;AAgBA;;AAEA;;AC7CA;AACA;;;AAGA;AACA;;;;;AAKA;AACA;;;;AAIA;AACA;;;AAGA;;;AClBA;AACA;;;AAGA;AACA;;;;;AAKA;AACA;;;;AAIA;AACA;;;AAGA;;;AC3BA;;;AAGA;;;;;AAKA;AACA;;;;AAIA;AACA;;;AHiDA;;;;AI9DA;AACA;AACA;;;AAGA;AACA;;;;;AAKA;AACA;;;;AAIA;AACA;;;;;;;;;;;AJgDA;;AAKA;AAGA;;;;;;;;;;;;AAYA;AACA;AACA;AAGA;AKnFA;;;;;;AAMA;;;;;AASA;;ACbA;;;;;;AAQA;;;;AAIA;;AAEA;AACA;;;;;;;;;AASA;;;;;;;;;;;;;ACrBA;;ACbA;AACA;AACA;AACA;AACA;AACA;AAGA;;ACCA;AACA;;AAEA;;;;ACbA;;;AAGA;;;AAKA;;;;;;;;;;;;;;;ACAA;AACA;AAGA;;;;;;;;;;ACLA;;;;;;;;;;ACsBA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;ACEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA","sources":["webpack://@mimirorg/component-library/./src/components/atoms/buttons/Button.styled.ts","webpack://@mimirorg/component-library/./src/components/atoms/buttons/variants/filledButton.ts","webpack://@mimirorg/component-library/./src/components/atoms/buttons/variants/outlinedButton.ts","webpack://@mimirorg/component-library/./src/components/atoms/buttons/variants/textButton.ts","webpack://@mimirorg/component-library/./src/components/atoms/buttons/variants/roundButton.ts","webpack://@mimirorg/component-library/./src/components/atoms/divider/Divider.ts","webpack://@mimirorg/component-library/./src/components/atoms/flow/connectors/FlowConnector.styled.ts","webpack://@mimirorg/component-library/./src/components/atoms/plain-link/PlainLink.tsx","webpack://@mimirorg/component-library/./src/components/atoms/tooltip/Tooltip.styled.ts","webpack://@mimirorg/component-library/./src/components/atoms/media/Icon.ts","webpack://@mimirorg/component-library/./src/components/atoms/media/Symbol.styled.ts","webpack://@mimirorg/component-library/./src/components/atoms/panel/MotionPanel.styled.tsx","webpack://@mimirorg/component-library/./src/components/atoms/spinner/Spinner.styled.ts","webpack://@mimirorg/component-library/./src/components/atoms/text/Heading.tsx","webpack://@mimirorg/component-library/./src/components/atoms/text/Text.tsx"],"sourcesContent":["import { motion } from \"framer-motion\";\nimport { ButtonHTMLAttributes, ElementType } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { flexMixin, focus, sizingMixin, spacingMixin } from \"../../core/theme/helpers\";\nimport { filledButton } from \"../buttons/variants/filledButton\";\nimport { outlinedButton } from \"../buttons/variants/outlinedButton\";\nimport { roundButton } from \"../buttons/variants/roundButton\";\nimport { textButton } from \"../buttons/variants/textButton\";\nimport { Flex, Polymorphic, Sizing, Spacings } from \"./../../core/props\";\nimport { getButtonColor } from \"./Button.helpers\";\n\nexport type ButtonColor = \"primary\" | \"success\" | \"warning\" | \"danger\" | \"error\";\n\nexport type ButtonContainerProps = Flex &\n  Sizing &\n  Spacings &\n  Polymorphic<ElementType> &\n  ButtonHTMLAttributes<HTMLButtonElement> & {\n    variant?: \"filled\" | \"outlined\" | \"text\" | \"round\";\n    iconPlacement?: \"left\" | \"right\";\n    iconOnly?: boolean;\n    buttonColor?: ButtonColor;\n  };\n\nexport const ButtonContainer = styled.button<ButtonContainerProps>`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  gap: ${(props) => props.theme.mimir.spacing.s};\n  flex-direction: ${(props) => props.iconPlacement === \"left\" && \"row-reverse\"};\n\n  white-space: nowrap;\n  text-decoration: none;\n\n  font: ${(props) => props.theme.mimir.typography.roles.label.large.font};\n  line-height: ${(props) => props.theme.mimir.typography.roles.label.large.lineHeight};\n  letter-spacing: ${(props) => props.theme.mimir.typography.roles.label.large.letterSpacing};\n\n  height: 32px;\n  width: fit-content;\n  min-width: 70px;\n  padding: ${(props) => props.theme.mimir.spacing.base} ${(props) => props.theme.mimir.spacing.xl};\n  border-radius: ${(props) => props.theme.mimir.border.radius.medium};\n\n  :hover {\n    cursor: pointer;\n  }\n\n  :disabled {\n    cursor: not-allowed;\n  }\n\n  img,\n  svg {\n    max-width: 24px;\n    max-height: 24px;\n  }\n\n  ${focus};\n\n  ${({ variant, buttonColor, ...props }) => {\n    const { color, border } = props.theme.mimir;\n\n    switch (variant) {\n      case \"filled\": {\n        return filledButton(color, getButtonColor(props.theme.mimir, buttonColor));\n      }\n      case \"outlined\": {\n        return outlinedButton(color, getButtonColor(props.theme.mimir, buttonColor));\n      }\n      case \"text\": {\n        return textButton(color);\n      }\n      case \"round\": {\n        return roundButton(color, border);\n      }\n    }\n  }};\n\n  ${({ iconOnly, ...props }) =>\n    iconOnly &&\n    css`\n      padding: ${props.theme.mimir.spacing.xs};\n      min-width: revert;\n      width: 24px;\n      height: 24px;\n\n      img,\n      svg {\n        max-width: 18px;\n        max-height: 18px;\n      }\n    `};\n\n  ${flexMixin};\n  ${sizingMixin};\n  ${spacingMixin};\n`;\n\nButtonContainer.defaultProps = {\n  variant: \"filled\",\n  buttonColor: \"primary\",\n};\n\n/**\n * An animation wrapper for the ButtonContainer component\n *\n * @see https://github.com/framer/motion\n */\nexport const MotionButtonContainer = motion(ButtonContainer);\n","import { css } from \"styled-components\";\nimport { ColorSystem } from \"../../../core/theme/props\";\nimport { lighten, meetsContrastGuidelines } from \"polished\";\n\nexport const filledButton = (color: ColorSystem, buttonColor?: string) => {\n  const baseColor = buttonColor ? buttonColor : color.primary.base;\n\n  const hoverColor = lighten(0.1, baseColor);\n  const hoverTextColor = meetsContrastGuidelines(color.text.base, hoverColor).AAA ? color.text.base : color.text.on;\n\n  const activeColor = lighten(0.3, baseColor);\n  const activeTextColor = meetsContrastGuidelines(color.text.base, activeColor).AAA ? color.text.base : color.text.on;\n\n  return css`\n    border: 0;\n    background-color: ${baseColor};\n    color: ${color.text.on};\n\n    :disabled {\n      background-color: ${color.outline.base};\n      color: ${color.surface.variant.on};\n    }\n\n    :not(:disabled) {\n      :hover {\n        background-color: ${hoverColor};\n        color: ${hoverTextColor};\n      }\n\n      :active {\n        background-color: ${activeColor};\n        color: ${activeTextColor};\n      }\n    }\n  `;\n};\n","import { css } from \"styled-components\";\nimport { ColorSystem } from \"../../../core/theme/props\";\nimport { lighten, meetsContrastGuidelines } from \"polished\";\n\nexport const outlinedButton = (color: ColorSystem, buttonColor?: string) => {\n  const baseColor = buttonColor ? buttonColor : color.primary.base;\n\n  const hoverColor = lighten(0.1, baseColor);\n  const hoverTextColor = meetsContrastGuidelines(color.text.base, hoverColor).AAA ? color.text.base : color.text.on;\n\n  const activeColor = lighten(0.3, baseColor);\n  const activeTextColor = meetsContrastGuidelines(color.text.base, activeColor).AAA ? color.text.base : color.text.on;\n\n  return css`\n    outline: 0;\n    background-color: transparent;\n    border: 1px solid ${baseColor};\n    color: ${color.text.base};\n\n    :disabled {\n      border-color: ${color.outline.base};\n      color: ${color.surface.variant.on};\n    }\n\n    :not(:disabled) {\n      :hover {\n        background-color: ${hoverColor};\n        color: ${hoverTextColor};\n      }\n\n      :active {\n        background-color: ${activeColor};\n        color: ${activeTextColor};\n      }\n    }\n  `;\n};\n","import { css } from \"styled-components\";\nimport { ColorSystem } from \"../../../core/theme/props\";\nimport { lighten } from \"polished\";\n\nexport const textButton = (color: ColorSystem) =>\n  css`\n    border: 0;\n    background-color: transparent;\n    color: ${color.primary.base};\n\n    :disabled {\n      color: ${color.surface.variant.on};\n    }\n\n    :not(:disabled) {\n      :hover {\n        background-color: ${lighten(0.1, color.primary.base)};\n        color: ${color.text.on};\n      }\n\n      :active {\n        background-color: ${lighten(0.3, color.primary.base)};\n        color: ${color.text.on};\n      }\n    }\n  `;\n","import { css } from \"styled-components\";\nimport { BorderSystem, ColorSystem } from \"../../../core/theme/props\";\nimport { lighten } from \"polished\";\n\nexport const roundButton = (color: ColorSystem, border: BorderSystem) => {\n  return css`\n    height: 50px;\n    width: 50px;\n    border-width: 0;\n    border-radius: ${border.radius.round};\n    background-color: ${color.primary.base};\n    color: ${color.text.on};\n\n    :disabled {\n      background-color: ${color.outline.base};\n      color: ${color.surface.variant.on};\n    }\n\n    :not(:disabled) {\n      :hover {\n        background-color: ${lighten(0.1, color.primary.base)};\n        color: ${color.text.on};\n      }\n\n      :active {\n        background-color: ${lighten(0.3, color.primary.base)};\n        color: ${color.text.on};\n      }\n    }\n\n    img,\n    svg {\n      max-width: 70%;\n      max-height: 70%;\n      width: 50%;\n      height: 50%;\n    }\n  `;\n};\n","import * as Separator from \"@radix-ui/react-separator\";\nimport styled, { css } from \"styled-components\";\n\ninterface DividerProps {\n  orientation?: \"horizontal\" | \"vertical\";\n  decorative?: boolean;\n  color?: string;\n}\n\n/**\n * A simple divider for creating a clear separation between content\n *\n * See documentation link below for details.\n * @see https://www.radix-ui.com/docs/primitives/components/separator\n */\nexport const Divider = styled(Separator.Root)<DividerProps>`\n  background-color: ${(props) => (props.color ? props.color : props.theme.mimir.color.primary.base)};\n  margin: 0 auto;\n  height: 1px;\n  width: 100%;\n  flex-shrink: 0;\n\n  ${(props) =>\n    props.orientation === \"vertical\" &&\n    css`\n      height: 100%;\n      margin: auto 0;\n      width: 1px;\n    `}\n`;\n\nDivider.defaultProps = {\n  orientation: \"horizontal\",\n  decorative: false,\n};\n","import styled from \"styled-components\";\r\n\r\nexport type FlowHandleProps = {\r\n  hidden?: boolean;\r\n  visible?: boolean;\r\n  connectorWidth?: number;\r\n  connectorHeight?: number;\r\n};\r\n\r\nexport type FlowHandleBoxProps = {\r\n  hidden?: boolean;\r\n  visible?: boolean;\r\n  left: string;\r\n  top: string;\r\n};\r\n\r\nexport const FlowHandleContainer = styled.div<FlowHandleProps>`\r\n  display: flex;\r\n  flex: 0 0 ${(props) => props.connectorWidth}px;\r\n  gap: 4px;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin: 5px 4px;\r\n`;\r\n\r\nexport const FlowHandleBox = styled.div<FlowHandleBoxProps>`\r\n  position: relative;\r\n  line-height: 0;\r\n  transition: top 0.2s ease-out, left 0.2s ease-out;\r\n  display: ${(props) => (props.visible && props.visible === true ? \"block\" : \"none\")};\r\n\r\n  top: ${(props) => props.top};\r\n  left: ${(props) => props.left};\r\n  transform: revert;\r\n\r\n  width: fit-content;\r\n  height: fit-content;\r\n  padding: 0;\r\n  margin: 0;\r\n\r\n  .react-flow__handle-block {\r\n    visibility: ${(props) => (props.visible ? \"visible\" : \"hidden\")};\r\n    transition: top 0.2s ease-out, left 0.2s ease-out;\r\n  }\r\n`;\r\n","import { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { Sizing } from \"../../core/props\";\nimport { sizingMixin } from \"../../core/theme/helpers\";\n\ntype PlainLinkProps = Sizing;\n\n/**\n * Removes styles from react router links.\n * Useful when wrapping other elements with navigation semantics.\n */\nexport const PlainLink = styled(Link)<PlainLinkProps>`\n  color: inherit;\n  text-decoration: inherit;\n\n  :link,\n  :hover {\n    color: inherit;\n    text-decoration: inherit;\n  }\n\n  ${sizingMixin};\n`;\n","import { motion } from \"framer-motion\";\nimport styled from \"styled-components\";\nimport { Sizing } from \"../../core/props\";\nimport { sizingMixin } from \"../../core/theme/helpers\";\n\nexport type TooltipContentProps = Sizing;\n\nconst TooltipContent = styled.div<TooltipContentProps>`\n  padding: ${(props) => props.theme.mimir.spacing.base} ${(props) => props.theme.mimir.spacing.l};\n  border-radius: ${(props) => props.theme.mimir.border.radius.large};\n  background-color: ${(props) => props.theme.mimir.color.surface.inverse.base};\n  color: ${(props) => props.theme.mimir.color.surface.inverse.on};\n  box-shadow: ${(props) => props.theme.mimir.shadow.small};\n  ${sizingMixin};\n`;\n\nexport const MotionTooltipContent = motion(TooltipContent);\n","import { ImgHTMLAttributes } from \"react\";\nimport styled from \"styled-components\";\nimport { Sizing } from \"./../../core/props\";\nimport { sizingMixin } from \"../../core/theme/helpers\";\n\nexport type IconProps = ImgHTMLAttributes<HTMLImageElement> &\n  Sizing & {\n    size?: number;\n  };\n\n/**\n * A simple wrapper over the img-tag\n * Has a default width and height of 1em\n * @param size sets height and width of icon\n */\nexport const Icon = styled.img<IconProps>`\n  display: inline-block;\n  width: ${(props) => (props.size ? `${props.size}px` : \"1em\")};\n  height: ${(props) => (props.size ? `${props.size}px` : \"1em\")};\n  line-height: 1;\n  ${sizingMixin};\n`;\n","import styled from \"styled-components\";\r\n\r\nexport const SymbolImage = styled.img`\r\n  max-height: 100%;\r\n  pointer-events: none;\r\n`;\r\n\r\nexport const SymbolBox = styled.div`\r\n  max-height: 30px;\r\n\r\n  ${SymbolImage} {\r\n    min-height: 30px;\r\n  }\r\n`;\r\n\r\nexport const LogoBox = styled.div`\r\n  position: absolute;\r\n  bottom: 0;\r\n  height: 20px;\r\n  width: 50px;\r\n  align-self: flex-start;\r\n  pointer-events: none;\r\n  margin-left: 10px;\r\n\r\n  img {\r\n    min-height: 100%;\r\n    filter: brightness(0%);\r\n  }\r\n`;\r\n","import { motion } from \"framer-motion\";\r\nimport styled from \"styled-components\";\r\nimport { Spacings } from \"../../core/props\";\r\nimport { spacingMixin } from \"../../core/theme/helpers\";\r\n\r\nexport type ResizablePanelContainerProps = Spacings & {\r\n  maxTrigger?: boolean;\r\n};\r\n\r\n/**\r\n * Removes styles from react router links.\r\n * Useful when wrapping other elements with navigation semantics.\r\n */\r\nconst ResizablePanelContainer = styled.div<ResizablePanelContainerProps>`\r\n  position: relative;\r\n  overflow: ${(props) => (props.maxTrigger ? \"auto\" : \"hidden\")};\r\n  ${spacingMixin};\r\n`;\r\n\r\nResizablePanelContainer.defaultProps = {\r\n  maxTrigger: false,\r\n};\r\n\r\n/**\r\n * An animation wrapper for the ResizablePanelConatiner component\r\n *\r\n * @see https://github.com/framer/motion\r\n */\r\nexport const MotionResizablePanelContainer = motion(ResizablePanelContainer);\r\n","import styled from \"styled-components\";\n\nexport const SpinnerContainer = styled.div`\n  margin: 0;\n  padding: 0;\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  margin-top: -50px;\n  margin-left: -100px;\n  width: 50px;\n  height: 50px;\n`;\n\nexport const SpinnerOverlay = styled.div`\n  margin: 0;\n  padding: 0;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 901;\n`;\n","import { ElementType } from \"react\";\nimport styled from \"styled-components\";\nimport { Display, Palette, Polymorphic, Sizing, Spacings, TextVariant, Typography } from \"../../core/props\";\nimport { Ellipsis } from \"../../core/props/ellipsis\";\nimport {\n  displayMixin,\n  ellipsisMixin,\n  getTextRole,\n  paletteMixin,\n  sizingMixin,\n  spacingMixin,\n  typographyMixin,\n} from \"../../core/theme/helpers\";\n\ntype HeadingProps = Spacings &\n  Sizing &\n  Pick<Palette, \"color\"> &\n  Pick<Display, \"whiteSpace\" | \"display\"> &\n  Pick<Typography, \"font\" | \"fontSize\" | \"fontWeight\" | \"textAlign\" | \"textTransform\" | \"wordBreak\"> &\n  Polymorphic<ElementType> &\n  TextVariant &\n  Ellipsis;\n\n/**\n * A polymorphic component for heading elements\n *\n * @param as element to display component as (defaults to <h1>)\n * @param font overrides font of text element\n * @param fontSize overrides default size of the text element\n * @param fontWeight overrides default font-weight of the text element\n * @param color overrides default color of the text element\n * @param useEllipsis enable truncation of text\n * @param ellipsisMaxLines set how many lines to display before truncation\n * @constructor\n */\nexport const Heading = styled.h1<HeadingProps>`\n  ${({ variant }) => getTextRole(variant)};\n  ${spacingMixin};\n  ${paletteMixin};\n  ${displayMixin};\n  ${ellipsisMixin};\n  ${typographyMixin};\n  ${sizingMixin};\n`;\n\nHeading.displayName = \"Heading\";\n\nHeading.defaultProps = {\n  useEllipsis: false,\n  ellipsisMaxLines: 1,\n};\n","import { ElementType } from \"react\";\nimport styled from \"styled-components\";\nimport {\n  displayMixin,\n  ellipsisMixin,\n  getTextRole,\n  paletteMixin,\n  sizingMixin,\n  spacingMixin,\n  typographyMixin,\n} from \"../../core/theme/helpers\";\nimport { Display, Ellipsis, Palette, Polymorphic, Sizing, Spacings, TextVariant, Typography } from \"./../../core/props\";\n\nexport type TextProps = Spacings &\n  Sizing &\n  Pick<Palette, \"color\" | \"bgColor\"> &\n  Pick<Display, \"whiteSpace\" | \"display\" | \"overflow\" | \"textOverflow\" | \"visibility\"> &\n  Pick<\n    Typography,\n    | \"font\"\n    | \"fontSize\"\n    | \"fontWeight\"\n    | \"textAlign\"\n    | \"textTransform\"\n    | \"wordBreak\"\n    | \"fontFamily\"\n    | \"fontStyle\"\n    | \"letterSpacing\"\n    | \"lineHeight\"\n  > &\n  Polymorphic<ElementType> &\n  TextVariant &\n  Ellipsis & {\n    htmlFor?: string;\n  };\n\n/**\n * A polymorphic text component for non-heading text\n *\n * @param as element to display component as (defaults to <p>)\n * @param font overrides font of text element\n * @param fontSize overrides default size of the text element\n * @param fontWeight overrides default font-weight of the text element\n * @param color overrides default color of the text element\n * @constructor\n */\nexport const Text = styled.p<TextProps>`\n  ${({ variant }) => getTextRole(variant)};\n  ${spacingMixin};\n  ${paletteMixin};\n  ${displayMixin};\n  ${ellipsisMixin};\n  ${typographyMixin};\n  ${sizingMixin};\n`;\n\nText.displayName = \"Text\";\n\nText.defaultProps = {\n  useEllipsis: false,\n  ellipsisMaxLines: 1,\n  htmlFor: \"\",\n};\n"],"names":[],"sourceRoot":""}